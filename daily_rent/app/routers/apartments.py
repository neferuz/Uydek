from fastapi import APIRouter, Depends, HTTPException, status, Query as FastAPIQuery
from sqlalchemy.orm import Session
from typing import List
from .. import schemas, models, database
from fastapi import APIRouter, Form
from app.database import SessionLocal
from app.models import Apartment, ResidentialComplex
from math import radians, cos, sin, asin, sqrt
from fastapi import Query
import json


router = APIRouter(
    prefix="/apartments",
    tags=["apartments"]
)

# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –ë–î
def get_db():
    db = database.SessionLocal()
    try:
        yield db
    finally:
        db.close()

# üîí –ü—Ä–∏–º–µ—Ä: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞ (–≤—Ä–µ–º–µ–Ω–Ω–æ —Ö–∞—Ä–¥–∫–æ–¥, –ø–æ–∑–∂–µ –±—É–¥–µ—Ç JWT)
def fake_admin_check():
    return True  # –ø–æ–∫–∞ –≤—Å–µ–≥–¥–∞ True, –ø–æ—Ç–æ–º –∑–∞–º–µ–Ω–∏–º –Ω–∞ –Ω–æ—Ä–º–∞–ª—å–Ω—É—é –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é

# –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä—ã
def process_apartment_data(apartment):
    processed_amenities = []
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ amenities - –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π JSON –∏–ª–∏ —Å–ª–æ–≤–∞—Ä–µ–º
    if apartment.amenities:
        amenities_data = apartment.amenities
        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
        if isinstance(amenities_data, str):
            try:
                amenities_data = json.loads(amenities_data)
            except json.JSONDecodeError:
                print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON amenities –¥–ª—è apartment {apartment.id}: {amenities_data}")
                amenities_data = None
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å –∏ –µ—Å—Ç—å –∫–ª—é—á 'Amenities'
        if isinstance(amenities_data, dict) and 'Amenities' in amenities_data:
            for category, items in amenities_data['Amenities'].items():
                for item_label in items:
                    processed_amenities.append(schemas.Amenity(icon=item_label["icon"], label=item_label["label"]))

    processed_photo_urls = []
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ photo_urls - –º–æ–∂–µ—Ç –±—ã—Ç—å —Å—Ç—Ä–æ–∫–æ–π JSON –∏–ª–∏ —Å–ª–æ–≤–∞—Ä–µ–º
    if apartment.photo_urls:
        photo_data = apartment.photo_urls
        # –ï—Å–ª–∏ —ç—Ç–æ —Å—Ç—Ä–æ–∫–∞, –ø—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ JSON
        if isinstance(photo_data, str):
            try:
                photo_data = json.loads(photo_data)
            except json.JSONDecodeError:
                print(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ JSON –¥–ª—è apartment {apartment.id}: {photo_data}")
                photo_data = None
        
        # –ï—Å–ª–∏ —ç—Ç–æ —Å–ª–æ–≤–∞—Ä—å –∏ –µ—Å—Ç—å –∫–ª—é—á 'Images'
        if isinstance(photo_data, dict) and 'Images' in photo_data:
            if isinstance(photo_data['Images'], list):
                processed_photo_urls = photo_data['Images']
        # –ï—Å–ª–∏ —ç—Ç–æ –ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å–æ–∫ (–ø—Ä—è–º–æ)
        elif isinstance(photo_data, list):
            processed_photo_urls = photo_data

    # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–∞–Ω–Ω—ã—Ö –∫–≤–∞—Ä—Ç–∏—Ä—ã, —á—Ç–æ–±—ã –ø–µ—Ä–µ–¥–∞—Ç—å –µ–≥–æ –≤ ApartmentOut
    apartment_data = apartment.__dict__.copy()
    apartment_data['amenities'] = processed_amenities
    apartment_data['photo_urls'] = processed_photo_urls
    apartment_data.pop('_sa_instance_state', None)

    return schemas.ApartmentOut(**apartment_data)

# üìå –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π –ø–æ –≥–æ—Ä–æ–¥—É –∏ –¥–∞—Ç–∞–º
@router.get("/", response_model=List[schemas.ApartmentOut])
def list_apartments(
    db: Session = Depends(get_db),
    city: str = FastAPIQuery(None, description="–ì–æ—Ä–æ–¥ –∏–ª–∏ —á–∞—Å—Ç—å –∞–¥—Ä–µ—Å–∞"),
    start_date: str = FastAPIQuery(None, description="–î–∞—Ç–∞ –∑–∞–µ–∑–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD"),
    end_date: str = FastAPIQuery(None, description="–î–∞—Ç–∞ –≤—ã–µ–∑–¥–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ YYYY-MM-DD")
):
    query = db.query(models.Apartment)
    if city:
        query = query.filter(models.Apartment.city.ilike(f"%{city}%"))
    apartments = query.all()

    # –í–†–ï–ú–ï–ù–ù–û –æ—Ç–∫–ª—é—á–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –ø–æ –¥–∞—Ç–∞–º –¥–ª—è —Ç–µ—Å—Ç–∞
    # if start_date and end_date:
    #     ...
    #     apartments = available_apartments

    results = []
    for apartment in apartments:
        results.append(process_apartment_data(apartment))
    return results


# üìå –ü–æ–ª—É—á–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –ø–æ ID
@router.get("/{apartment_id}", response_model=schemas.ApartmentOut)
def get_apartment_by_id(apartment_id: int, db: Session = Depends(get_db)):
    apartment = db.query(models.Apartment).filter(models.Apartment.id == apartment_id).first()
    if not apartment:
        raise HTTPException(status_code=404, detail="–ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    return process_apartment_data(apartment)


# üìå –î–æ–±–∞–≤–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É)
@router.post("/", response_model=schemas.ApartmentOut)
def create_apartment(
    apartment: schemas.ApartmentCreate,
    db: Session = Depends(get_db),
    is_admin: bool = Depends(fake_admin_check)
):
    if not is_admin:
        raise HTTPException(status_code=403, detail="Only admins can add apartments")
    db_apartment = models.Apartment(**apartment.dict())
    db.add(db_apartment)
    db.commit()
    db.refresh(db_apartment)
    return db_apartment

# üìå –û–±–Ω–æ–≤–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –ø–æ ID (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É)
@router.put("/{apartment_id}", response_model=schemas.ApartmentOut)
def update_apartment(
    apartment_id: int,
    apartment_update: schemas.ApartmentCreate,
    db: Session = Depends(get_db),
    is_admin: bool = Depends(fake_admin_check)
):
    if not is_admin:
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail="Only admins can update apartments")

    db_apartment = db.query(models.Apartment).filter(models.Apartment.id == apartment_id).first()
    if not db_apartment:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="–ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    for key, value in apartment_update.dict(exclude_unset=True).items():
        setattr(db_apartment, key, value)

    db.add(db_apartment)
    db.commit()
    db.refresh(db_apartment)
    return db_apartment


# üìå –£–¥–∞–ª–∏—Ç—å –∫–≤–∞—Ä—Ç–∏—Ä—É –ø–æ ID (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É)
@router.delete("/{apartment_id}", status_code=status.HTTP_204_NO_CONTENT)
def delete_apartment(
    apartment_id: int,
    db: Session = Depends(get_db),
    is_admin: bool = Depends(fake_admin_check)
):
    if not is_admin:
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail="Only admins can delete apartments")

    db_apartment = db.query(models.Apartment).filter(models.Apartment.id == apartment_id).first()
    if not db_apartment:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="–ö–≤–∞—Ä—Ç–∏—Ä–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    db.delete(db_apartment)
    db.commit()
    return {"message": "–ö–≤–∞—Ä—Ç–∏—Ä–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞"}

# üìê –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–∞—Å—á—ë—Ç–∞ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—è –ø–æ —Ñ–æ—Ä–º—É–ª–µ Haversine
def haversine(lat1, lon1, lat2, lon2):
    R = 6371  # –†–∞–¥–∏—É—Å –ó–µ–º–ª–∏ –≤ –∫–º
    dlat = radians(lat2 - lat1)
    dlon = radians(lon2 - lon1)
    a = sin(dlat/2)**2 + cos(radians(lat1)) * cos(radians(lat2)) * sin(dlon/2)**2
    c = 2 * asin(sqrt(a))
    return R * c

# üìç –≠–Ω–¥–ø–æ–∏–Ω—Ç: /apartments/nearby
@router.get("/nearby", response_model=List[schemas.ApartmentOut])
def get_nearby_apartments(
    lat: float = Query(..., description="–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: —à–∏—Ä–æ—Ç–∞"),
    lon: float = Query(..., description="–í–∞—à–µ –º–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: –¥–æ–ª–≥–æ—Ç–∞"),
    radius_km: float = Query(5, description="–†–∞–¥–∏—É—Å –ø–æ–∏—Å–∫–∞ –≤ –∫–∏–ª–æ–º–µ—Ç—Ä–∞—Ö"),
    db: Session = Depends(get_db)
):
    apartments = db.query(models.Apartment).filter(
        models.Apartment.latitude.isnot(None),
        models.Apartment.longitude.isnot(None)
    ).all()

    nearby = []

    for apt in apartments:
        dist = haversine(lat, lon, apt.latitude, apt.longitude)
        if dist <= radius_km:
            nearby.append((dist, apt))

    # –û—Ç—Å–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞—Å—Å—Ç–æ—è–Ω–∏—é
    nearby.sort(key=lambda x: x[0])
    
    # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    results = []
    for _, apartment in nearby:
        results.append(process_apartment_data(apartment))
    
    return results

# üìå –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏
@router.get("/complexes", response_model=List[schemas.ResidentialComplexOut])
def list_residential_complexes(db: Session = Depends(get_db)):
    return db.query(models.ResidentialComplex).all()

# üìå –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫—É (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
@router.post("/complexes", response_model=schemas.ResidentialComplexOut)
def create_residential_complex(
    complex_in: schemas.ResidentialComplexCreate,
    db: Session = Depends(get_db),
    is_admin: bool = Depends(fake_admin_check)
):
    if not is_admin:
        raise HTTPException(status_code=403, detail="Only admins can add complexes")
    db_complex = models.ResidentialComplex(**complex_in.dict())
    db.add(db_complex)
    db.commit()
    db.refresh(db_complex)
    return db_complex

# üìå –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –≤ –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–µ –ø–æ id
@router.get("/complexes/{complex_id}/apartments", response_model=List[schemas.ApartmentOut])
def get_apartments_by_complex(complex_id: int, db: Session = Depends(get_db)):
    apartments = db.query(models.Apartment).filter(models.Apartment.residential_complex_id == complex_id).all()
    results = []
    for apartment in apartments:
        results.append(process_apartment_data(apartment))
    return results

# üìå –û–±–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫—É –ø–æ id (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞)
@router.put("/complexes/{complex_id}", response_model=schemas.ResidentialComplexOut)
def update_residential_complex(
    complex_id: int,
    complex_update: schemas.ResidentialComplexCreate,
    db: Session = Depends(get_db),
    is_admin: bool = Depends(fake_admin_check)
):
    db_complex = db.query(models.ResidentialComplex).filter(models.ResidentialComplex.id == complex_id).first()
    if not db_complex:
        raise HTTPException(status_code=404, detail="–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    for key, value in complex_update.dict(exclude_unset=True).items():
        setattr(db_complex, key, value)
    db.add(db_complex)
    db.commit()
    db.refresh(db_complex)
    return db_complex