from fastapi import APIRouter, Depends, HTTPException, Query, status
from sqlalchemy.orm import Session
from typing import List
from datetime import date
import json

from .. import models, schemas, database
from ..auth import get_current_user

router = APIRouter(
    prefix="/bookings",
    tags=["apartments bookings"]
)

# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
def get_db():
    db = database.SessionLocal()
    try:
        yield db
    finally:
        db.close()

# üîê –í–†–ï–ú–ï–ù–ù–û: –ø–æ–ª—É—á–∞–µ–º telegram_id –Ω–∞–ø—Ä—è–º—É—é
def get_current_user(db: Session = Depends(get_db), telegram_id: int = 12345678):
    user = db.query(models.User).filter_by(telegram_id=telegram_id).first()
    if not user:
        raise HTTPException(status_code=404, detail="–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return user

# üìå –°–æ–∑–¥–∞—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
@router.post("/", response_model=schemas.BookingOut)
def create_booking(
    booking: schemas.BookingCreate,
    db: Session = Depends(get_db),
    current_user: models.User = Depends(get_current_user)
):
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ—Å–µ—á–µ–Ω–∏—è –¥–∞—Ç
    overlapping = db.query(models.Booking).filter(
        models.Booking.apartment_id == booking.apartment_id,
        models.Booking.start_date <= booking.end_date,
        models.Booking.end_date >= booking.start_date
    ).first()

    if overlapping:
        raise HTTPException(status_code=400, detail="–ö–≤–∞—Ä—Ç–∏—Ä–∞ —É–∂–µ –∑–∞–±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∞ –Ω–∞ —ç—Ç–∏ –¥–∞—Ç—ã")

    db_booking = models.Booking(
        apartment_id=booking.apartment_id,
        start_date=booking.start_date,
        end_date=booking.end_date,
        user_id=current_user.id,
        status="pending"
    )
    db.add(db_booking)
    db.commit()
    db.refresh(db_booking)
    return db_booking

# üìå –ü–æ–ª—É—á–∏—Ç—å —Å–≤–æ–∏ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
@router.get("/my", response_model=List[schemas.BookingOut])
def get_my_bookings(
    db: Session = Depends(get_db),
    current_user: models.User = Depends(get_current_user)
):
    return db.query(models.Booking).filter_by(user_id=current_user.id).order_by(models.Booking.created_at.desc()).all()

# üìå –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∫–≤–∞—Ä—Ç–∏—Ä—ã –ø–æ –¥–∞—Ç–∞–º
@router.get("/available", response_model=List[schemas.ApartmentOut])
def get_available_apartments(
    start: date = Query(...),
    end: date = Query(...),
    db: Session = Depends(get_db)
):
    booked_apartment_ids = db.query(models.Booking.apartment_id).filter(
        models.Booking.start_date <= end,
        models.Booking.end_date >= start
    ).subquery()

    available_apartments = db.query(models.Apartment).filter(
        ~models.Apartment.id.in_(booked_apartment_ids)
    ).all()

    result = []
    for apt in available_apartments:
        apt_dict = apt.__dict__.copy()
        # Parse amenities and photo_urls if not None
        if apt_dict.get('amenities'):
            try:
                apt_dict['amenities'] = json.loads(apt_dict['amenities'])
            except Exception:
                apt_dict['amenities'] = []
        else:
            apt_dict['amenities'] = []
        if apt_dict.get('photo_urls'):
            try:
                apt_dict['photo_urls'] = json.loads(apt_dict['photo_urls'])
            except Exception:
                apt_dict['photo_urls'] = []
        else:
            apt_dict['photo_urls'] = []
        result.append(schemas.ApartmentOut(**apt_dict))
    return result

# üìå –ü–æ–ª—É—á–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ ID
@router.get("/{booking_id}", response_model=schemas.BookingOut)
def get_booking_by_id(
    booking_id: int,
    db: Session = Depends(get_db),
    current_user: models.User = Depends(get_current_user)
):
    booking = db.query(models.Booking).filter(models.Booking.id == booking_id).first()
    if not booking:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
    if not current_user.is_admin and booking.user_id != current_user.id:
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail="–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —ç—Ç–æ–≥–æ –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")
    return booking

# üìå –û–±–Ω–æ–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–¥–æ—Å—Ç—É–ø–Ω–æ —Ç–æ–ª—å–∫–æ –∞–¥–º–∏–Ω—É)
@router.put("/{booking_id}/status", response_model=schemas.BookingOut)
def update_booking_status(
    booking_id: int,
    new_status: str = Query(..., description="–ù–æ–≤—ã–π —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, 'confirmed', 'cancelled', 'completed')"),
    db: Session = Depends(get_db),
    current_user: models.User = Depends(get_current_user)
):
    if not current_user.is_admin:
        raise HTTPException(status_code=status.HTTP_403_FORBIDDEN, detail="–¢–æ–ª—å–∫–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—ã –º–æ–≥—É—Ç –∏–∑–º–µ–Ω—è—Ç—å —Å—Ç–∞—Ç—É—Å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è")

    db_booking = db.query(models.Booking).filter(models.Booking.id == booking_id).first()
    if not db_booking:
        raise HTTPException(status_code=status.HTTP_404_NOT_FOUND, detail="–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    db_booking.status = new_status
    db.commit()
    db.refresh(db_booking)
    return db_booking
