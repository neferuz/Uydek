from fastapi import APIRouter, Depends, HTTPException
from sqlalchemy.orm import Session
from typing import List
from .. import models, schemas, database
from app.models import ResidentialComplex
from app.schemas import ResidentialComplexCreate, ResidentialComplexOut

router = APIRouter(
    prefix="/api/admin",
    tags=["admin"]
)

# –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç—å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –ë–î
def get_db():
    db = database.SessionLocal()
    try:
        yield db
    finally:
        db.close()

# üîí –í–†–ï–ú–ï–ù–ù–û: –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ –∞–¥–º–∏–Ω–∞ —á–µ—Ä–µ–∑ telegram_id
def get_admin_user(db: Session = Depends(get_db), telegram_id: int = 12345678):
    user = db.query(models.User).filter_by(telegram_id=telegram_id).first()
    if not user or not user.is_admin:
        raise HTTPException(status_code=403, detail="–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤")
    return user


# üìå –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
@router.get("/users", response_model=List[schemas.UserOut])
def get_all_users(db: Session = Depends(get_db), admin: models.User = Depends(get_admin_user)):
    return db.query(models.User).all()


# üìå –°–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–π
@router.get("/bookings", response_model=List[schemas.BookingOut])
def get_all_bookings(db: Session = Depends(get_db), admin: models.User = Depends(get_admin_user)):
    return db.query(models.Booking).order_by(models.Booking.created_at.desc()).all()


# üìå –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç—å –±—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ
@router.patch("/bookings/{booking_id}", response_model=schemas.BookingOut)
def update_booking_status(
    booking_id: int,
    status: str,  # "confirmed" | "cancelled"
    db: Session = Depends(get_db),
    admin: models.User = Depends(get_admin_user)
):
    booking = db.query(models.Booking).filter_by(id=booking_id).first()
    if not booking:
        raise HTTPException(status_code=404, detail="–ë—Ä–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")

    if status not in ["confirmed", "cancelled"]:
        raise HTTPException(status_code=400, detail="–ù–µ–¥–æ–ø—É—Å—Ç–∏–º—ã–π —Å—Ç–∞—Ç—É—Å")

    booking.status = status
    db.commit()
    db.refresh(booking)
    return booking

# –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∏
@router.get("/residential-complexes", response_model=List[ResidentialComplexOut])
def get_all_complexes(db: Session = Depends(get_db)):
    return db.query(ResidentialComplex).all()

# –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫—É
@router.post("/residential-complexes", response_model=ResidentialComplexOut)
def create_complex(complex_in: ResidentialComplexCreate, db: Session = Depends(get_db)):
    db_complex = ResidentialComplex(**complex_in.dict())
    db.add(db_complex)
    db.commit()
    db.refresh(db_complex)
    return db_complex

# –û–±–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—Ä–æ–π–∫—É –ø–æ id
@router.put("/residential-complexes/{complex_id}", response_model=ResidentialComplexOut)
def update_complex(complex_id: int, complex_update: ResidentialComplexCreate, db: Session = Depends(get_db)):
    db_complex = db.query(ResidentialComplex).filter(ResidentialComplex.id == complex_id).first()
    if not db_complex:
        raise HTTPException(status_code=404, detail="–ù–æ–≤–æ—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    for key, value in complex_update.dict(exclude_unset=True).items():
        setattr(db_complex, key, value)
    db.add(db_complex)
    db.commit()
    db.refresh(db_complex)
    return db_complex
